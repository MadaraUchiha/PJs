!function(n,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):n.Promise=e()}(this,function(){"use strict";function n(r){if(!(this instanceof n))throw new TypeError("Constructor Promise requires `new`");if(!s(r))throw new TypeError("Must pass resolver function");this._state=o,this._value=[],this._handledRejection=!1,h(this,u(this,e),u(this,t),{then:r})}function e(n,e,t,o){return e?(o||(o=new r(this.constructor)),l(d(o,e,n)),o.promise):this}function t(n,e,t,o){return t?(o||(o=new r(this.constructor)),l(d(o,t,n)),o.promise):this}function o(n,e,t,o){return e||t?(o||(o=new r(this.constructor)),n.push({deferred:o,onFulfilled:e||o.resolve,onRejected:t||o.reject}),o.promise):this}function r(n){var e=this;return this.promise=new n(function(n,t){e.resolve=n,e.reject=t}),e}function i(e,o,r){var i=e._value;e._state=o,e._value=r;for(var u=0;u<i.length;u++){var c=i[u];e._state(r,c.onFulfilled,c.onRejected,c.deferred)}o!==t||e._handledRejection||setTimeout(function(){e._handledRejection||n._onPossiblyUnhandledRejection(r,e)},0)}function u(n,e){return function(t){i(n,e,t)}}function c(){}function s(n){return"function"==typeof n}function f(n){return n===Object(n)}function a(n,e){for(var t=0;t<n.length;t++)e(n[t],t)}function d(n,e,t){var o=n.promise,r=n.resolve,i=n.reject;return function(){try{var n=e(t);if(r===e||i===e)return;h(o,r,i,n,n)}catch(u){i(u)}}}function h(n,e,t,o,r){var u=t,a=void 0,d=void 0;try{if(o===n)throw new TypeError("Cannot fulfill promise with itself");var l=f(o);l&&o instanceof n.constructor?i(n,o._state,o._value):l&&(a=o.then)&&s(a)?(d=function(o){d=u=c,h(n,e,t,o,o)},u=function(n){d=u=c,t(n)},a.call(r,function(n){d(n)},function(n){u(n)})):e(o)}catch(v){u(v)}}n.prototype.then=function(n,e){return n=s(n)?n:void 0,e=s(e)?e:void 0,e&&(this._handledRejection=!0),this._state(this._value,n,e)},n.prototype["catch"]=function(n){return this.then(void 0,n)},n.resolve=function(n){var e=this,t=void 0;return t=f(n)&&n instanceof this?n:new e(function(e){e(n)})},n.reject=function(n){var e=this,t=new e(function(e,t){t(n)});return t},n.all=function(n){var e=this,t=new e(function(t,o){var r=n.length,i=new Array(r);return 0===r?t(i):void a(n,function(n,u){e.resolve(n).then(function(n){i[u]=n,0===--r&&t(i)},o)})});return t},n.race=function(n){var e=this,t=new e(function(t,o){for(var r=0,i=n.length;i>r;r++)e.resolve(n[r]).then(t,o)});return t},n._onPossiblyUnhandledRejection=function(n,e){throw new Error("Unhandled Promise Rejection: "+value)};var l=function(){function n(){for(var n=0;o>n;n++){var e=t[n];t[n]=null,e()}o=0}var e=void 0;"undefined"!=typeof process&&s(process.nextTick)?e=function(){process.nextTick(n)}:"undefined"!=typeof setImmediate?e=function(){setImmediate(n)}:"undefined"!=typeof window&&s(window.postMessage)?(window.addEventListener("message",n),e=function(){window.postMessage("macro-task","*")}):e=function(){setTimeout(n,0)};var t=new Array(16),o=0;return function(n){0===o&&e(),t[o++]=n}}();return n});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,